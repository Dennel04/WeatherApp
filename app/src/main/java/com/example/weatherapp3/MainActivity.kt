package com.example.weatherapp3

import android.content.Context
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MainActivity : AppCompatActivity() {
    private val API_KEY = "e3ddbe05691cbfd23374e78d0bb16f75"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val etCity = findViewById<EditText>(R.id.etCity)
        val btnGetWeather = findViewById<Button>(R.id.btnGetWeather)
        val tvWeather = findViewById<TextView>(R.id.tvWeather)
        val btnFavorite = findViewById<Button>(R.id.btnFavorite) // –ö–Ω–æ–ø–∫–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
        val btnChangeTheme = findViewById<Button>(R.id.btnChangeTheme)

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        loadCity(etCity)

        btnGetWeather.setOnClickListener {
            val city = etCity.text.toString().trim()
            if (city.isNotEmpty()) {
                getWeather(city, tvWeather)
                btnFavorite.visibility = Button.VISIBLE // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–≤–µ–∑–¥–æ—á–∫–∏
                saveCity(city) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
            } else {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥", Toast.LENGTH_SHORT).show()
            }
        }

        btnFavorite.setOnClickListener {
            val city = etCity.text.toString()
            if (city.isNotEmpty()) {
                // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                Toast.makeText(this, "$city –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", Toast.LENGTH_SHORT).show()
            }
        }

        btnChangeTheme.setOnClickListener {
            toggleTheme()
        }
    }

    private fun getWeatherEmoji(description: String, main: String): String {
        return when (main.lowercase()) {
            "clear" -> "‚òÄÔ∏è"
            "clouds" -> when (description.lowercase()) {
                "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å" -> "üå§"
                "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å" -> "‚õÖ"
                "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏" -> "‚õÖ"
                else -> "‚òÅÔ∏è"
            }
            "rain" -> when (description.lowercase()) {
                "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å" -> "üå¶"
                "–¥–æ–∂–¥—å" -> "üåß"
                "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å" -> "üåß"
                else -> "üåß"
            }
            "drizzle" -> "üå¶"
            "thunderstorm" -> "‚õà"
            "snow" -> when (description.lowercase()) {
                "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥" -> "üå®"
                "—Å–Ω–µ–≥" -> "üå®"
                "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥" -> "‚ùÑÔ∏è"
                else -> "üå®"
            }
            "mist", "fog" -> "üå´"
            "haze" -> "üå´"
            else -> "üå°" // –∑–Ω–∞—á–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        }
    }

    private fun getWeather(city: String, tvWeather: TextView) {
        RetrofitClient.instance.getWeather(city, API_KEY)
            .enqueue(object : Callback<WeatherResponse> {
                override fun onResponse(
                    call: Call<WeatherResponse>,
                    response: Response<WeatherResponse>
                ) {
                    if (response.isSuccessful) {
                        response.body()?.let { weather ->
                            val weatherData = weather.weather.firstOrNull()
                            val description = weatherData?.description ?: "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                            val main = weatherData?.main ?: ""
                            val weatherEmoji = getWeatherEmoji(description, main)

                            val weatherText = buildString {
                                append("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: üå° ${weather.main.temp}¬∞C\n")
                                append("–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: $weatherEmoji ${description.capitalize()}\n")
                                append("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: üí® ${weather.wind.speed} –º/—Å\n")
                                append("–û–±–ª–∞—á–Ω–æ—Å—Ç—å: ‚òÅÔ∏è ${weather.clouds.all}%\n")
                                append("–í–ª–∞–∂–Ω–æ—Å—Ç—å: üíß ${weather.main.humidity}%\n")
                                weather.main.feels_like?.let {
                                    append("–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: üå° ${it}¬∞C")
                                }
                            }
                            tvWeather.text = weatherText
                        } ?: run {
                            tvWeather.text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚ùå"
                        }
                    } else {
                        tvWeather.text = "–û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå"
                    }
                }

                override fun onFailure(call: Call<WeatherResponse>, t: Throwable) {
                    tvWeather.text = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ‚ùå: ${t.message}"
                }
            })
    }

    private fun saveCity(city: String) {
        val sharedPreferences = getSharedPreferences("WeatherApp", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        editor.putString("city", city)
        editor.apply()
    }

    private fun loadCity(etCity: EditText) {
        val sharedPreferences = getSharedPreferences("WeatherApp", Context.MODE_PRIVATE)
        val savedCity = sharedPreferences.getString("city", "")
        if (!savedCity.isNullOrEmpty()) {
            etCity.setText(savedCity)
        }
    }

    private fun toggleTheme() {
        val currentMode = AppCompatDelegate.getDefaultNightMode()
        if (currentMode == AppCompatDelegate.MODE_NIGHT_YES) {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
        } else {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)
        }
    }
}
